# Эрик Эванс
# Модель предметной области в работе
## Переработка знаний
Любая система - это цепочка этапов с разветвлениями как условиями или вершинами выбора
### Составление эффективного моделирования
* установка связи межжу моделью и релизацией (Связь с действительностью)
* ввод языка, основанного на модели (Общий понятийный аппарат)
* разработка информоемкая модели (Содержание общией информации разного рода)
* дистиляция модели (Отброс второстепенных понятий либо вон, либо в новую модель)
* мозговые штурмы (Event Storming)

**Переработка знаний**- важный элемент дейтельности программиста. Обработать много информации и сформировать ее в видимую модель. Все это вместе с командой (специалистов предметной области, пользователей систем, технической поддержки).

Плохой стиль переботки - каскадный: специалист -> аналитик -> программист. Знания перетекают в одном направлении и не накапливаются.
Плохой стиль "итерационный": если от специалистов приходят таски по очереди и программисты не пытают абстрагироваться

#### Постоянное обучение
Любая предметная область может приподносить сюрпризы и нельзя ее недооценивать
**NB невежество заставляет делать неверные предположения**
Вся команда должна непрерывно обучаться

#### Информоемкая архитектура
Прояснение через переработку знаний: самых скрытых знаний (правил). Донести важность таких незначительных правил специалистам

#### Углубленные модели
ПОнять что именно необходимо автоматизировать. Первоначальная постановка может быть далека от того, что нужно

## Коммуникация и язык
Модель предметной области может служить основой общего языка для коммуникации в рамках проекта по разработке ПО
**NB Модель - это набор понятий с названиями, терминами, отношениями, взаимосвязями, отражающими понимание предметной области**

**NB Термины и связи - это семантика языка, адаптированная к предметной области**
Язык нужен для разработки информоемкой архитектуры программыю  Отсутствие языка порождает(ухудшает) обмен знаниями не только между специалистами, но и между членами разных команд. Не должно быть перевода между членами.

### Словарь единого языка
* имена классов и основных операций(глаголов)
* термины для обсуждения правил
* термины из принципов высокоуровневой реализации (карта контекстов, крупномасштабная архитектура)
* названия шаблонов

Изменения в языке - это изменения в модели и нужно переименовывать понятия, методы в угоду появившемуся новому знанию
* Нужно старать пользоваться языком, если он неудобен, то это повод пересмотреть термины
* Единый язык должен находить отражение везде: модель (от нее изначально оттталкиваемся), документация, схемы разговор

**Единый язык** - основной носитель тех аспектов, архтектуры, которые не проявляются в коде; крупномасштабной структуре; организающих всю систему, ограниченных контекстов, опредлеляющих отношение между разными системами и моделями, например, шаблонов, относящихся к модели и программной архитектуре

Единый язык сложно внедрять. Может помочь обсуждение вслух: Через дискуссию программисты и специалисты могут найти неточности в ходе своего мышления и, если неточность найдена, ее можно и нужно прояснить.

Единый язык  - это смесь жаргона специалистов, программистов, терминов предметной области. И, как следствие, это потенциальные термины модели, имена ограниченных контекстов и терминология крупномасштабной структуры

### Диаграммы, схемы, диаграммы
* Схемы нужны для более простого взаимодействия (наглядного). Не стоит все переносить на них.
    * Можно нарисовать схему с текстом, определить классы и функции словами
    * Схема может быть от руки, лишь бы была читаема
* Документация характеристики
    * Должна дополнять код и устные обсуждения
    * Код не может быть документацией: слишком сух, а иногда и абстракте(или слишком конкретен)
    * В ней не может быть деталей реализации, это обязанность кода
    * Должна отразить смысл, помочь понять крупномасштабную архитектуру
    * Должна сконцентрировать внимание на ключевых элементах
    * Не должна отставать от процесса
    * Должна меняться и должна быть гибкой(без лишних инструкций и уточнений)

Документация должна:
* разъяснить понятийный аппарат модели
* помогать ориентироваться в деталях кода
* дать понимание, как должна использоваться модель
* должна быть написана на едином языке
* должна помочь в написании ТЗ, пользовательской документации

**Если документация не влияет на единый язык, т.е ее не заполняют, не используют, то она либо составлена неверно (слишком много - слишком мало), либо не отражает реальной стадии разработки**

### Пояснительная модель
Модель, по которой выполняется проектирование - это один взгляд на проблему, но для обучения, ввода в курс дела полезно иметь вспомогательные точки зрения для лучшей передачи общих данных
Можно предствить предметную область, как пояснительную модель. Пояснительную модель можно расширять схемой или документацией. Например, есть модель в системе терминов, но для непосвященных это может лишь запутать ситуацию и тут-то является пояснительная модель (схема, график) для более наглядного представления. А модель  - это список связей с блоками, отражающая архитектуру приложения, в виде более строгихдиаграмм, таблиц, схем. 
**Важно четко понимать разницу между пояснительной моделью и рабочую модель**
























